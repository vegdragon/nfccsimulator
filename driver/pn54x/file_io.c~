#include <linux/kfifo.h>
#include "file_io.h"


static int nci_kfifo_init(void)
{
    struct kfifo *fifo;
    nci_data_t *stu1, *stu2, *stu3, *stu4;
    nci_data_t *stu_tmp;
    char* c_tmp;
    int i;
    // !!importent  init a unlocked lock
    spinlock_t sl = SPIN_LOCK_UNLOCKED;

    // init kfifo
    fifo = kfifo_alloc(4*sizeof(nci_data_t), GFP_KERNEL, &sl);
    
    stu1 = kmalloc(sizeof(nci_data_t), GFP_KERNEL);
    stu1->id = 1;
    stu1->data = "20000101";
    kfifo_put(fifo, (char *)stu1, sizeof(nci_data_t));

    stu2 = kmalloc(sizeof(nci_data_t), GFP_KERNEL);
    stu2->id = 1;
    stu2->data = "400003001001";
    kfifo_put(fifo, (char *)stu2, sizeof(nci_data_t));

    stu3 = kmalloc(sizeof(nci_data_t), GFP_KERNEL);
    stu3->id = 1;
    stu3->data = "wyb3";
    kfifo_put(fifo, (char *)stu3, sizeof(nci_data_t));

    stu4 = kmalloc(sizeof(nci_data_t), GFP_KERNEL);
    stu4->id = 1;
    stu4->data = "wyb4";
    kfifo_put(fifo, (char *)stu4, sizeof(nci_data_t));

    c_tmp = kmalloc(sizeof(nci_data_t), GFP_KERNEL);
    printk(KERN_ALERT "current fifo length is : %d\n", kfifo_len(fifo));
    for (i=0; i < 4; i++) {

        kfifo_get(fifo, c_tmp, sizeof(nci_data_t));
        stu_tmp = (nci_data_t *)c_tmp;
        print_student(stu_tmp);
        printk(KERN_ALERT "current fifo length is : %d\n", kfifo_len(fifo));
    }
    
    printk(KERN_ALERT "current fifo length is : %d\n", kfifo_len(fifo));
    kfifo_free(fifo);
    kfree(c_tmp);
    return 0;
}
