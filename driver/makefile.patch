diff --git a/.gitignore b/.gitignore
index 57af07c..e1de040 100644
--- a/.gitignore
+++ b/.gitignore
@@ -84,3 +84,13 @@ GTAGS
 *.orig
 *~
 \#*#
+
+kernel_goldfish.IAB
+kernel_goldfish.IAD
+kernel_goldfish.IMB
+kernel_goldfish.IMD
+kernel_goldfish.PFI
+kernel_goldfish.PO
+kernel_goldfish.PR
+kernel_goldfish.PRI
+kernel_goldfish.PS
diff --git a/arch/arm/configs/goldfish_armv7_defconfig b/arch/arm/configs/goldfish_armv7_defconfig
index 45142c6..b0a9ce5 100644
--- a/arch/arm/configs/goldfish_armv7_defconfig
+++ b/arch/arm/configs/goldfish_armv7_defconfig
@@ -196,4 +196,6 @@ CONFIG_CRYPTO_PCBC=y
 CONFIG_CRYPTO_SHA256=y
 CONFIG_CRYPTO_AES=y
 CONFIG_CRYPTO_TWOFISH=y
+#CONFIG_PN5XX=y
+CONFIG_PN54X=y
 # CONFIG_CRYPTO_ANSI_CPRNG is not set
diff --git a/drivers/Kconfig b/drivers/Kconfig
index a765f40..3c3cd0e 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -142,4 +142,7 @@ source "drivers/virt/Kconfig"
 
 source "drivers/devfreq/Kconfig"
 
+source "drivers/pn54x/Kconfig"
+
+
 endmenu
diff --git a/drivers/Makefile b/drivers/Makefile
index b5d2823..6668d5d 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -135,3 +135,6 @@ obj-$(CONFIG_VIRT_DRIVERS)	+= virt/
 obj-$(CONFIG_HYPERV)		+= hv/
 
 obj-$(CONFIG_PM_DEVFREQ)	+= devfreq/
+
+# pn54x simulator driver
+obj-$(CONFIG_PN54X)             += pn54x/
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 49e39e8..d433396 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -57,3 +57,5 @@ obj-$(CONFIG_MAX8997_MUIC)	+= max8997-muic.o
 obj-$(CONFIG_WL127X_RFKILL)	+= wl127x-rfkill.o
 obj-$(CONFIG_SENSORS_AK8975)	+= akm8975.o
 obj-$(CONFIG_APANIC)		+= apanic.o
+#obj-y                           += pn5xx_i2c.o
+#obj-$(CONFIG_PN5XX)             += pn5xx_i2c.o
diff --git a/drivers/misc/pn5xx_i2c.c b/drivers/misc/pn5xx_i2c.c
new file mode 100644
index 0000000..7754d3e
--- /dev/null
+++ b/drivers/misc/pn5xx_i2c.c
@@ -0,0 +1,766 @@
+/*
+ * Copyright (C) 2010 Trusted Logic S.A.
+ * modifications copyright (C) 2015 NXP B.V.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/fs.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+#include <linux/list.h>
+#include <linux/i2c.h>
+#include <linux/irq.h>
+#include <linux/jiffies.h>
+#include <linux/uaccess.h>
+#include <linux/delay.h>
+#include <linux/interrupt.h>
+#include <linux/io.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <linux/miscdevice.h>
+#include <linux/spinlock.h>
+#include <linux/pn5xx_i2c.h>
+#include <linux/of_gpio.h>
+#include <linux/regulator/consumer.h>
+#include <linux/of.h>
+
+#define MAX_BUFFER_SIZE	512
+
+#define MODE_OFF    0
+#define MODE_RUN    1
+#define MODE_FW     2
+
+#define CHIP "pn54x"
+#define DRIVER_CARD "PN54x NFC"
+#define DRIVER_DESC "NFC driver for PN54x Family"
+
+#ifndef CONFIG_OF
+#define CONFIG_OF
+#endif
+
+struct pn54x_dev	{
+	wait_queue_head_t read_wq;
+	struct mutex read_mutex;
+	struct i2c_client *client;
+	struct miscdevice pn54x_device;
+	int ven_gpio;
+	int firm_gpio;
+	int irq_gpio;
+	int clkreq_gpio;
+	struct regulator *pvdd_reg;
+	struct regulator *vbat_reg;
+	struct regulator *pmuvcc_reg;
+	struct regulator *sevdd_reg;
+	bool irq_enabled;
+	spinlock_t irq_enabled_lock;
+};
+
+/**********************************************************
+ * Interrupt control and handler
+ **********************************************************/
+static void pn54x_disable_irq(struct pn54x_dev *pn54x_dev)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&pn54x_dev->irq_enabled_lock, flags);
+	if (pn54x_dev->irq_enabled) {
+		disable_irq_nosync(pn54x_dev->client->irq);
+		pn54x_dev->irq_enabled = false;
+	}
+	spin_unlock_irqrestore(&pn54x_dev->irq_enabled_lock, flags);
+}
+
+static irqreturn_t pn54x_dev_irq_handler(int irq, void *dev_id)
+{
+	struct pn54x_dev *pn54x_dev = dev_id;
+
+	pn54x_disable_irq(pn54x_dev);
+
+	/* Wake up waiting readers */
+	wake_up(&pn54x_dev->read_wq);
+
+	return IRQ_HANDLED;
+}
+
+/**********************************************************
+ * private functions
+ **********************************************************/
+static int pn544_enable(struct pn54x_dev *dev, int mode)
+{
+	int r;
+
+	/* turn on the regulators */
+	/* -- if the regulators were specified, they're required */
+	if(dev->pvdd_reg != NULL)
+	{
+		r = regulator_enable(dev->pvdd_reg);
+		if (r < 0){
+			pr_err("%s: not able to enable pvdd\n", __func__);
+			return r;
+		}
+	}
+	if(dev->vbat_reg != NULL)
+	{
+		r = regulator_enable(dev->vbat_reg);
+		if (r < 0){
+			pr_err("%s: not able to enable vbat\n", __func__);
+			goto enable_exit0;
+		}
+	}
+	if(dev->pmuvcc_reg != NULL)
+	{
+		r = regulator_enable(dev->pmuvcc_reg);
+		if (r < 0){
+			pr_err("%s: not able to enable pmuvcc\n", __func__);
+			goto enable_exit1;
+		}
+	}
+	if(dev->sevdd_reg != NULL)
+	{
+		r = regulator_enable(dev->sevdd_reg);
+		if (r < 0){
+			pr_err("%s: not able to enable sevdd\n", __func__);
+			goto enable_exit2;
+		}
+	}
+
+	if (MODE_RUN == mode) {
+		pr_info("%s power on\n", __func__);
+		if (gpio_is_valid(dev->firm_gpio))
+			gpio_set_value(dev->firm_gpio, 0);
+		gpio_set_value(dev->ven_gpio, 1);
+		msleep(100);
+	}
+	else if (MODE_FW == mode) {
+		if (!gpio_is_valid(dev->firm_gpio))
+			return -ENOTSUPP;
+		/* power on with firmware download (requires hw reset)
+		 */
+		pr_info("%s power on with firmware\n", __func__);
+		gpio_set_value(dev->ven_gpio, 1);
+		msleep(20);
+		gpio_set_value(dev->firm_gpio, 1);
+		msleep(20);
+		gpio_set_value(dev->ven_gpio, 0);
+		msleep(100);
+		gpio_set_value(dev->ven_gpio, 1);
+		msleep(20);
+	}
+	else {
+		pr_err("%s bad arg %d\n", __func__, mode);
+		return -EINVAL;
+	}
+
+	return 0;
+
+enable_exit2:
+	if(dev->pmuvcc_reg) regulator_disable(dev->pmuvcc_reg);
+enable_exit1:
+	if(dev->vbat_reg) regulator_disable(dev->vbat_reg);
+enable_exit0:
+	if(dev->pvdd_reg) regulator_disable(dev->pvdd_reg);
+
+	return r;
+}
+
+static void pn544_disable(struct pn54x_dev *dev)
+{
+	/* power off */
+	pr_info("%s power off\n", __func__);
+	if (gpio_is_valid(dev->firm_gpio))
+		gpio_set_value(dev->firm_gpio, 0);
+	gpio_set_value(dev->ven_gpio, 0);
+	msleep(100);
+
+	if(dev->sevdd_reg) regulator_disable(dev->sevdd_reg);
+	if(dev->pmuvcc_reg) regulator_disable(dev->pmuvcc_reg);
+	if(dev->vbat_reg) regulator_disable(dev->vbat_reg);
+	if(dev->pvdd_reg) regulator_disable(dev->pvdd_reg);
+
+}
+
+/**********************************************************
+ * driver functions
+ **********************************************************/
+static ssize_t pn54x_dev_read(struct file *filp, char __user *buf,
+		size_t count, loff_t *offset)
+{
+	struct pn54x_dev *pn54x_dev = filp->private_data;
+	char tmp[MAX_BUFFER_SIZE];
+	int ret;
+
+	if (count > MAX_BUFFER_SIZE)
+		count = MAX_BUFFER_SIZE;
+
+	pr_debug("%s : reading %zu bytes.\n", __func__, count);
+
+	mutex_lock(&pn54x_dev->read_mutex);
+
+	if (!gpio_get_value(pn54x_dev->irq_gpio)) {
+		if (filp->f_flags & O_NONBLOCK) {
+			ret = -EAGAIN;
+			goto fail;
+		}
+
+		while (1) {
+			pn54x_dev->irq_enabled = true;
+			enable_irq(pn54x_dev->client->irq);
+			ret = wait_event_interruptible(
+					pn54x_dev->read_wq,
+					!pn54x_dev->irq_enabled);
+
+			pn54x_disable_irq(pn54x_dev);
+
+			if (ret)
+				goto fail;
+
+			if (gpio_get_value(pn54x_dev->irq_gpio))
+				break;
+
+			pr_warning("%s: spurious interrupt detected\n", __func__);
+		}
+	}
+
+	/* Read data */
+	ret = 0; // i2c_master_recv(pn54x_dev->client, tmp, count);
+
+	mutex_unlock(&pn54x_dev->read_mutex);
+
+	/* pn54x seems to be slow in handling I2C read requests
+	 * so add 1ms delay after recv operation */
+	udelay(1000);
+
+	if (ret < 0) {
+		pr_err("%s: i2c_master_recv returned %d\n", __func__, ret);
+		return ret;
+	}
+	if (ret > count) {
+		pr_err("%s: received too many bytes from i2c (%d)\n",
+			__func__, ret);
+		return -EIO;
+	}
+	if (copy_to_user(buf, tmp, ret)) {
+		pr_warning("%s : failed to copy to user space\n", __func__);
+		return -EFAULT;
+	}
+	return ret;
+
+fail:
+	mutex_unlock(&pn54x_dev->read_mutex);
+	return ret;
+}
+
+static ssize_t pn54x_dev_write(struct file *filp, const char __user *buf,
+		size_t count, loff_t *offset)
+{
+	struct pn54x_dev  *pn54x_dev;
+	char tmp[MAX_BUFFER_SIZE];
+	int ret;
+
+	pn54x_dev = filp->private_data;
+
+	if (count > MAX_BUFFER_SIZE)
+		count = MAX_BUFFER_SIZE;
+
+	if (copy_from_user(tmp, buf, count)) {
+		pr_err("%s : failed to copy from user space\n", __func__);
+		return -EFAULT;
+	}
+
+	pr_debug("%s : writing %zu bytes.\n", __func__, count);
+	/* Write data */
+	ret = i2c_master_send(pn54x_dev->client, tmp, count);
+	if (ret != count) {
+		pr_err("%s : i2c_master_send returned %d\n", __func__, ret);
+		ret = -EIO;
+	}
+
+	/* pn54x seems to be slow in handling I2C write requests
+	 * so add 1ms delay after I2C send oparation */
+	udelay(1000);
+
+	return ret;
+}
+
+static int pn54x_dev_open(struct inode *inode, struct file *filp)
+{
+	struct pn54x_dev *pn54x_dev = container_of(filp->private_data,
+											   struct pn54x_dev,
+											   pn54x_device);
+
+	filp->private_data = pn54x_dev;
+
+	pr_info("%s : %d,%d\n", __func__, imajor(inode), iminor(inode));
+
+	// pn544_enable(pn54x_dev, MODE_RUN);
+
+	return 0;
+}
+
+static int pn54x_dev_release(struct inode *inode, struct file *filp)
+{
+	// struct pn54x_dev *pn54x_dev = container_of(filp->private_data,
+	//										   struct pn54x_dev,
+	//										   pn54x_device);
+
+	pr_info("%s : closing %d,%d\n", __func__, imajor(inode), iminor(inode));
+
+	// pn544_disable(pn54x_dev);
+
+	return 0;
+}
+
+static long  pn54x_dev_ioctl(struct file *filp, unsigned int cmd,
+				unsigned long arg)
+{
+	struct pn54x_dev *pn54x_dev = filp->private_data;
+
+	pr_info("%s, cmd=%d, arg=%lu\n", __func__, cmd, arg);
+	switch (cmd) {
+	case PN544_SET_PWR:
+		if (arg == 2) {
+			/* power on w/FW */
+			pn544_enable(pn54x_dev, arg);
+		} else if (arg == 1) {
+			/* power on */
+			pn544_enable(pn54x_dev, arg);
+		} else  if (arg == 0) {
+			/* power off */
+			pn544_disable(pn54x_dev);
+		} else {
+			pr_err("%s bad SET_PWR arg %lu\n", __func__, arg);
+			return -EINVAL;
+		}
+		break;
+	case PN54X_CLK_REQ:
+		if(1 == arg){
+			if(gpio_is_valid(pn54x_dev->clkreq_gpio)){
+				gpio_set_value(pn54x_dev->clkreq_gpio, 1);
+			}
+		}
+		else if(0 == arg) {
+			if(gpio_is_valid(pn54x_dev->clkreq_gpio)){
+				gpio_set_value(pn54x_dev->clkreq_gpio, 0);
+			}
+		} else {
+			pr_err("%s bad CLK_REQ arg %lu\n", __func__, arg);
+			return -EINVAL;
+		}
+		break;
+	default:
+		pr_err("%s bad ioctl %u\n", __func__, cmd);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static const struct file_operations pn54x_dev_fops = {
+	.owner	= THIS_MODULE,
+	.llseek	= no_llseek,
+	.read	= pn54x_dev_read,
+	.write	= pn54x_dev_write,
+	.open	= pn54x_dev_open,
+	.release  = pn54x_dev_release,
+	.unlocked_ioctl  = pn54x_dev_ioctl,
+};
+
+
+/*
+ * Handlers for alternative sources of platform_data
+ */
+#ifdef CONFIG_OF
+/*
+ * Translate OpenFirmware node properties into platform_data
+ */
+static int pn54x_get_pdata(struct device *dev,
+							struct pn544_i2c_platform_data *pdata)
+{
+	struct device_node *node;
+	u32 flags;
+	int val;
+
+	/* make sure there is actually a device tree node */
+	node = dev->of_node;
+	if (!node)
+		return -ENODEV;
+
+	memset(pdata, 0, sizeof(*pdata));
+
+	/* read the dev tree data */
+
+	/* ven pin - enable's power to the chip - REQUIRED */
+	val = of_get_named_gpio_flags(node, "enable-gpios", 0, &flags);
+	if (val >= 0) {
+		pdata->ven_gpio = val;
+	}
+	else {
+		dev_err(dev, "VEN GPIO error getting from OF node\n");
+		return val;
+	}
+
+	/* firm pin - controls firmware download - OPTIONAL */
+	val = of_get_named_gpio_flags(node, "firmware-gpios", 0, &flags);
+	if (val >= 0) {
+		pdata->firm_gpio = val;
+	}
+	else {
+		pdata->firm_gpio = -EINVAL;
+		dev_warn(dev, "FIRM GPIO <OPTIONAL> error getting from OF node\n");
+	}
+
+	/* irq pin - data available irq - REQUIRED */
+	val = of_get_named_gpio_flags(node, "interrupt-gpios", 0, &flags);
+	if (val >= 0) {
+		pdata->irq_gpio = val;
+	}
+	else {
+		dev_err(dev, "IRQ GPIO error getting from OF node\n");
+		return val;
+	}
+
+	/* clkreq pin - controls the clock to the PN547 - OPTIONAL */
+	val = of_get_named_gpio_flags(node, "nxp,pn54x-clkreq", 0, &flags);
+	if (val >= 0) {
+		pdata->clkreq_gpio = val;
+	}
+	else {
+		pdata->clkreq_gpio = -EINVAL;
+		dev_warn(dev, "CLKREQ GPIO <OPTIONAL> error getting from OF node\n");
+	}
+
+	/* handle the regulator lines - these are optional
+	 * PVdd - pad Vdd (544, 547)
+	 * Vbat - Battery (544, 547)
+	 * PMUVcc - UICC Power (544, 547)
+	 * SEVdd - SE Power (544)
+	 *
+	 * Will attempt to load a matching Regulator Resource for each
+	 * If no resource is provided, then the input will not be controlled
+	 * Example: if only PVdd is provided, it is the only one that will be
+	 *  turned on/off.
+	 */
+	pdata->pvdd_reg = regulator_get(dev, "nxp,pn54x-pvdd");
+	if(IS_ERR(pdata->pvdd_reg)) {
+		pr_err("%s: could not get nxp,pn54x-pvdd, rc=%ld\n", __func__, PTR_ERR(pdata->pvdd_reg));
+		pdata->pvdd_reg = NULL;
+	}
+
+	pdata->vbat_reg = regulator_get(dev, "nxp,pn54x-vbat");
+	if (IS_ERR(pdata->vbat_reg)) {
+		pr_err("%s: could not get nxp,pn54x-vbat, rc=%ld\n", __func__, PTR_ERR(pdata->vbat_reg));
+		pdata->vbat_reg = NULL;
+	}
+
+	pdata->pmuvcc_reg = regulator_get(dev, "nxp,pn54x-pmuvcc");
+	if (IS_ERR(pdata->pmuvcc_reg)) {
+		pr_err("%s: could not get nxp,pn54x-pmuvcc, rc=%ld\n", __func__, PTR_ERR(pdata->pmuvcc_reg));
+		pdata->pmuvcc_reg = NULL;
+	}
+
+	pdata->sevdd_reg = regulator_get(dev, "nxp,pn54x-sevdd");
+	if (IS_ERR(pdata->sevdd_reg)) {
+		pr_err("%s: could not get nxp,pn54x-sevdd, rc=%ld\n", __func__, PTR_ERR(pdata->sevdd_reg));
+		pdata->sevdd_reg = NULL;
+	}
+
+	return 0;
+}
+#else
+static int pn54x_get_pdata(struct device *dev,
+							struct pn544_i2c_platform_data *pdata)
+{
+	pdata = dev->platform_data;
+	return 0;
+}
+#endif
+
+
+/*
+ * pn54x_probe
+ */
+#ifdef KERNEL_3_4_AND_OLDER
+ static int __devinit pn54x_probe(struct i2c_client *client,
+		const struct i2c_device_id *id)
+#else
+static int pn54x_probe(struct i2c_client *client,
+		const struct i2c_device_id *id)
+#endif
+{
+	int ret;
+	struct pn544_i2c_platform_data *pdata; // gpio values, from board file or DT
+	struct pn544_i2c_platform_data tmp_pdata;
+	struct pn54x_dev *pn54x_dev; // internal device specific data
+
+	pr_info("%s\n", __func__);
+
+	/* ---- retrieve the platform data ---- */
+	/* If the dev.platform_data is NULL, then */
+	/* attempt to read from the device tree */
+	if(!client->dev.platform_data)
+	{
+		ret = pn54x_get_pdata(&(client->dev), &tmp_pdata);
+		if(ret){
+			return ret;
+		}
+
+		pdata = &tmp_pdata;
+	}
+	else
+	{
+		pdata = client->dev.platform_data;
+	}
+
+	if (pdata == NULL) {
+		pr_err("%s : nfc probe fail\n", __func__);
+		return  -ENODEV;
+	}
+
+	/* validate the the adapter has basic I2C functionality */
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+		pr_err("%s : need I2C_FUNC_I2C\n", __func__);
+		return  -ENODEV;
+	}
+
+	/* reserve the GPIO pins */
+	pr_info("%s: request irq_gpio %d\n", __func__, pdata->irq_gpio);
+	ret = gpio_request(pdata->irq_gpio, "nfc_int");
+	if (ret){
+		pr_err("%s :not able to get GPIO irq_gpio\n", __func__);
+		return  -ENODEV;
+	}
+	ret = gpio_to_irq(pdata->irq_gpio);
+	if (ret < 0){
+		pr_err("%s :not able to map GPIO irq_gpio to an IRQ\n", __func__);
+		goto err_ven;
+	}
+	else{
+		client->irq = ret;
+	}
+
+	pr_info("%s: request ven_gpio %d\n", __func__, pdata->ven_gpio);
+	ret = gpio_request(pdata->ven_gpio, "nfc_ven");
+	if (ret){
+		pr_err("%s :not able to get GPIO ven_gpio\n", __func__);
+		goto err_ven;
+	}
+
+	if (gpio_is_valid(pdata->firm_gpio)) {
+		pr_info("%s: request firm_gpio %d\n", __func__, pdata->firm_gpio);
+		ret = gpio_request(pdata->firm_gpio, "nfc_firm");
+		if (ret){
+			pr_err("%s :not able to get GPIO firm_gpio\n", __func__);
+			goto err_firm;
+		}
+	}
+
+	if (gpio_is_valid(pdata->clkreq_gpio)) {
+		pr_info("%s: request clkreq_gpio %d\n", __func__, pdata->clkreq_gpio);
+		ret = gpio_request(pdata->clkreq_gpio, "nfc_clkreq");
+		if (ret){
+			pr_err("%s :not able to get GPIO clkreq_gpio\n", __func__);
+			goto err_clkreq;
+		}
+	}
+
+	/* allocate the pn54x driver information structure */
+	pn54x_dev = kzalloc(sizeof(*pn54x_dev), GFP_KERNEL);
+	if (pn54x_dev == NULL) {
+		dev_err(&client->dev, "failed to allocate memory for module data\n");
+		ret = -ENOMEM;
+		goto err_exit;
+	}
+
+	/* store the platform data in the driver info struct */
+	pn54x_dev->irq_gpio = pdata->irq_gpio;
+	pn54x_dev->ven_gpio = pdata->ven_gpio;
+	pn54x_dev->firm_gpio = pdata->firm_gpio;
+	pn54x_dev->clkreq_gpio = pdata->clkreq_gpio;
+	pn54x_dev->pvdd_reg = pdata->pvdd_reg;
+	pn54x_dev->vbat_reg = pdata->vbat_reg;
+	pn54x_dev->pmuvcc_reg = pdata->vbat_reg;
+	pn54x_dev->sevdd_reg = pdata->sevdd_reg;
+
+	pn54x_dev->client = client;
+
+	/* finish configuring the I/O */
+	ret = gpio_direction_input(pn54x_dev->irq_gpio);
+	if (ret < 0) {
+		pr_err("%s :not able to set irq_gpio as input\n", __func__);
+		goto err_exit;
+	}
+
+	ret = gpio_direction_output(pn54x_dev->ven_gpio, 0);
+	if (ret < 0) {
+		pr_err("%s : not able to set ven_gpio as output\n", __func__);
+		goto err_exit;
+	}
+
+	if (gpio_is_valid(pn54x_dev->firm_gpio)) {
+		ret = gpio_direction_output(pn54x_dev->firm_gpio, 0);
+		if (ret < 0) {
+			pr_err("%s : not able to set firm_gpio as output\n",
+				 __func__);
+			goto err_exit;
+		}
+	}
+
+	if (gpio_is_valid(pn54x_dev->clkreq_gpio)) {
+		ret = gpio_direction_output(pn54x_dev->clkreq_gpio, 0);
+		if (ret < 0) {
+			pr_err("%s : not able to set clkreq_gpio as output\n",
+				   __func__);
+			goto err_exit;
+		}
+	}
+
+	/* init mutex and queues */
+	init_waitqueue_head(&pn54x_dev->read_wq);
+	mutex_init(&pn54x_dev->read_mutex);
+	spin_lock_init(&pn54x_dev->irq_enabled_lock);
+
+	/* register as a misc device - character based with one entry point */
+	pn54x_dev->pn54x_device.minor = MISC_DYNAMIC_MINOR;
+	pn54x_dev->pn54x_device.name = CHIP;
+	pn54x_dev->pn54x_device.fops = &pn54x_dev_fops;
+	ret = misc_register(&pn54x_dev->pn54x_device);
+	if (ret) {
+		pr_err("%s : misc_register failed\n", __FILE__);
+		goto err_misc_register;
+	}
+
+	/* request irq.  the irq is set whenever the chip has data available
+	 * for reading.  it is cleared when all data has been read.
+	 */
+	pr_info("%s : requesting IRQ %d\n", __func__, client->irq);
+	pn54x_dev->irq_enabled = true;
+	ret = request_irq(client->irq, pn54x_dev_irq_handler,
+				IRQF_TRIGGER_HIGH, client->name, pn54x_dev);
+	if (ret) {
+		dev_err(&client->dev, "request_irq failed\n");
+		goto err_request_irq_failed;
+	}
+	pn54x_disable_irq(pn54x_dev);
+
+	i2c_set_clientdata(client, pn54x_dev);
+
+	return 0;
+
+err_request_irq_failed:
+	misc_deregister(&pn54x_dev->pn54x_device);
+err_misc_register:
+err_exit:
+	if (gpio_is_valid(pdata->clkreq_gpio))
+		gpio_free(pdata->clkreq_gpio);
+err_clkreq:
+	if (gpio_is_valid(pdata->firm_gpio))
+		gpio_free(pdata->firm_gpio);
+err_firm:
+	gpio_free(pdata->ven_gpio);
+err_ven:
+	gpio_free(pdata->irq_gpio);
+	return ret;
+}
+
+#ifdef KERNEL_3_4_AND_OLDER
+static int __devexit pn54x_remove(struct i2c_client *client)
+#else
+static int pn54x_remove(struct i2c_client *client)
+#endif
+{
+	struct pn54x_dev *pn54x_dev;
+
+	pr_info("%s\n", __func__);
+
+	pn54x_dev = i2c_get_clientdata(client);
+	free_irq(client->irq, pn54x_dev);
+	misc_deregister(&pn54x_dev->pn54x_device);
+	mutex_destroy(&pn54x_dev->read_mutex);
+	gpio_free(pn54x_dev->irq_gpio);
+	gpio_free(pn54x_dev->ven_gpio);
+	if (gpio_is_valid(pn54x_dev->firm_gpio))
+		gpio_free(pn54x_dev->firm_gpio);
+	if (gpio_is_valid(pn54x_dev->clkreq_gpio))
+		gpio_free(pn54x_dev->clkreq_gpio);
+	regulator_put(pn54x_dev->pvdd_reg);
+	regulator_put(pn54x_dev->vbat_reg);
+	regulator_put(pn54x_dev->pmuvcc_reg);
+	regulator_put(pn54x_dev->sevdd_reg);
+
+	kfree(pn54x_dev);
+
+	return 0;
+}
+
+/*
+ *
+ */
+#ifdef CONFIG_OF
+static struct of_device_id pn54x_dt_match[] = {
+	{ .compatible = "nxp,pn547", },
+	{ .compatible = "nxp,pn544", },
+	{},
+};
+MODULE_DEVICE_TABLE(of, pn54x_dt_match);
+#endif
+
+static const struct i2c_device_id pn54x_id[] = {
+	{ "pn547", 0 },
+	{ },
+};
+MODULE_DEVICE_TABLE(i2c, pn54x_id);
+
+static struct i2c_driver pn54x_driver = {
+	.id_table	= pn54x_id,
+	.probe		= pn54x_probe,
+#ifdef KERNEL_3_4_AND_OLDER
+	.remove		= __devexit_p(pn54x_remove),
+#else
+	.remove		= pn54x_remove,
+#endif
+	.driver		= {
+		.owner	= THIS_MODULE,
+		.name	= "pn544",
+		.of_match_table = pn54x_dt_match,
+	},
+};
+
+/*
+ * module load/unload record keeping
+ */
+
+static int __init pn54x_dev_init(void)
+{
+	pr_info("%s\n", __func__);
+	return i2c_add_driver(&pn54x_driver);
+}
+
+static void __exit pn54x_dev_exit(void)
+{
+	pr_info("%s\n", __func__);
+	i2c_del_driver(&pn54x_driver);
+}
+
+module_init(pn54x_dev_init);
+module_exit(pn54x_dev_exit);
+
+MODULE_AUTHOR("Sylvain Fonteneau");
+MODULE_DESCRIPTION(DRIVER_DESC);
+MODULE_LICENSE("GPL");
+
diff --git a/drivers/pn54x/Kconfig b/drivers/pn54x/Kconfig
new file mode 100644
index 0000000..3454043
--- /dev/null
+++ b/drivers/pn54x/Kconfig
@@ -0,0 +1,6 @@
+config PN54X
+  tristate "pn54x simulator driver"
+  default n
+  help
+  This is the pn54x simulator driver
+
diff --git a/drivers/pn54x/Makefile b/drivers/pn54x/Makefile
new file mode 100644
index 0000000..65d6ca4
--- /dev/null
+++ b/drivers/pn54x/Makefile
@@ -0,0 +1,2 @@
+obj-$(CONFIG_PN54X)+=pn54x.o nci_engine.o
+
diff --git a/drivers/pn54x/nci_engine.c b/drivers/pn54x/nci_engine.c
new file mode 100644
index 0000000..6e84012
--- /dev/null
+++ b/drivers/pn54x/nci_engine.c
@@ -0,0 +1,98 @@
+#include <linux/kfifo.h>
+#include <linux/spinlock_types.h>
+#include "nci_engine.h"
+
+#define KFF_LEN 512*256 
+#define TAG "NCI_ENGINE: "
+
+DECLARE_KFIFO_PTR(nci_fifo, nci_data_t *);
+
+void print_current_time(int is_new_line)
+{
+    struct timeval *tv;
+    struct tm *t;
+    tv = kmalloc(sizeof(struct timeval), GFP_KERNEL);
+    t = kmalloc(sizeof(struct tm), GFP_KERNEL);
+
+    do_gettimeofday(tv);
+    time_to_tm(tv->tv_sec, 0, t);
+
+    printk(KERN_ALERT "%s%ld-%d-%d %d:%d:%d", TAG,
+           t->tm_year + 1900,
+           t->tm_mon + 1,
+           t->tm_mday,
+           (t->tm_hour + 8) % 24,
+           t->tm_min,
+           t->tm_sec);
+
+    if (is_new_line == 1)
+        printk(KERN_ALERT "\n");
+    
+    kfree(tv);
+    kfree(t);
+}
+
+static void print_nci_data(nci_data_t * pNci)
+{
+    int i;
+    if (pNci != NULL)
+    {
+      printk(KERN_ALERT "%s=========================\n", TAG);
+      print_current_time(0);
+      printk(KERN_ALERT "timestamp=%ld\tdata=\n", pNci->timestamp);
+      for (i=0;i<20;i++)
+	printk(KERN_ALERT "%02x", pNci->data[i]);
+      printk(KERN_ALERT "%s=========================\n", TAG);
+    }
+}
+
+int nci_kfifo_init(void)
+{
+    int ret=0;
+
+    TRACE_FUNC_ENTER;
+
+    // init kfifo
+    ret = kfifo_alloc(&nci_fifo, 4, GFP_KERNEL);
+
+    if (ret != 0)
+    {
+      printk(KERN_ALERT "%skfifo_alloc failed!\n", TAG);
+      return ret;
+    }
+
+    TRACE_FUNC_EXIT;
+
+    return 0;
+}
+
+
+
+int nci_kfifo_release(void)
+{
+    TRACE_FUNC_ENTER;
+    kfifo_free(&nci_fifo);
+    TRACE_FUNC_EXIT;
+    return 0;
+}
+
+
+int nci_kfifo_push(nci_data_t * pNciData)
+{
+    int ret = 0;
+
+    TRACE_FUNC_ENTER;
+
+    kfifo_put(&nci_fifo, &pNciData);
+
+    printk(KERN_ALERT "%s current &fifo length is : %d\n", TAG, kfifo_len(&nci_fifo));
+
+        // ret = kfifo_get(&nci_fifo, &nci_data_tmp);
+        // WARN_ON(!ret);
+        
+    print_nci_data(pNciData);
+
+    TRACE_FUNC_EXIT;
+    return ret;
+}
+
diff --git a/drivers/pn54x/nci_engine.h b/drivers/pn54x/nci_engine.h
new file mode 100644
index 0000000..5d29809
--- /dev/null
+++ b/drivers/pn54x/nci_engine.h
@@ -0,0 +1,29 @@
+#ifndef _NCI_ENGINE_H_ 
+#define _NCI_ENGINE_H_  
+
+#include<linux/init.h>
+#include<linux/slab.h>
+#include<linux/module.h>
+#include<linux/kernel.h>
+#include<linux/kfifo.h>
+#include<linux/time.h>
+
+#define CMD_NCI_FIFO_INIT	0
+#define CMD_NCI_FIFO_PUSH	1
+#define CMD_NCI_FIFO_RELEASE	2
+
+
+#define TRACE_FUNC_ENTER printk(KERN_ALERT "%s: entering...\n", __func__);
+#define TRACE_FUNC_EXIT printk(KERN_ALERT "%s: exiting...\n", __func__);
+
+typedef struct nci_data
+{
+    long		timestamp;
+    char		data[300];
+} nci_data_t;
+
+int nci_kfifo_init(void);
+int nci_kfifo_release(void);
+int nci_kfifo_push(nci_data_t * pNciData);
+
+#endif
diff --git a/drivers/pn54x/pn54x.c b/drivers/pn54x/pn54x.c
new file mode 100755
index 0000000..2b0d16a
--- /dev/null
+++ b/drivers/pn54x/pn54x.c
@@ -0,0 +1,395 @@
+    #include <linux/init.h>  
+    #include <linux/module.h>  
+    #include <linux/types.h>  
+    #include <linux/fs.h>  
+    #include <linux/proc_fs.h>  
+    #include <linux/device.h>  
+    #include <asm/uaccess.h>  
+
+    #include "pn54x.h"
+    #include "nci_engine.h"
+
+    /* major/minor dev version no. */  
+    static int pn54x_major = 0;  
+    static int pn54x_minor = 0;  
+      
+    /* class & device */  
+    static struct class* pn54x_class = NULL;  
+    static struct pn54x_android_dev* pn54x_dev = NULL;  
+      
+    /* device file operations */  
+    static int pn54x_open(struct inode* inode, struct file* filp);  
+    static int pn54x_release(struct inode* inode, struct file* filp);  
+    static ssize_t pn54x_read(struct file* filp, char __user *buf, size_t count, loff_t* f_pos);  
+    static ssize_t pn54x_write(struct file* filp, const char __user *buf, size_t count, loff_t* f_pos);  
+      
+static long  pn54x_dev_ioctl(struct file *filp, unsigned int cmd,
+				unsigned long arg);
+    /*设备文件操作方法表*/  
+    static struct file_operations pn54x_fops = {  
+        .owner = THIS_MODULE,  
+        .open = pn54x_open,  
+        .release = pn54x_release,  
+        .read = pn54x_read,  
+        .write = pn54x_write,
+        .unlocked_ioctl = pn54x_dev_ioctl,
+    };  
+      
+    /*访问设置属性方法*/  
+    static ssize_t pn54x_val_show(struct device* dev, struct device_attribute* attr,  char* buf);  
+    static ssize_t pn54x_val_store(struct device* dev, struct device_attribute* attr, const char* buf, size_t count);  
+      
+    /*定义设备属性*/  
+    static DEVICE_ATTR(val, S_IRUGO | S_IWUSR, pn54x_val_show, pn54x_val_store);  
+
+    /*打开设备方法*/  
+    static int pn54x_open(struct inode* inode, struct file* filp) {  
+        struct pn54x_android_dev* dev;          
+          
+        /*将自定义设备结构体保存在文件指针的私有数据域中，以便访问设备时拿来用*/  
+        dev = container_of(inode->i_cdev, struct pn54x_android_dev, dev);  
+        filp->private_data = dev;
+
+        nci_kfifo_init();  
+          
+        return 0;  
+    }  
+      
+    /*设备文件释放时调用，空实现*/  
+    static int pn54x_release(struct inode* inode, struct file* filp) {  
+        return 0;  
+    }  
+      
+    /*读取设备的寄存器val的值*/  
+static ssize_t pn54x_read(struct file* filp, char __user *buf, size_t count, loff_t* f_pos) 
+{  
+        ssize_t err = 0;  
+        struct pn54x_android_dev* dev = filp->private_data;    
+      
+        /*同步访问*/  
+        if(down_interruptible(&(dev->sem))) {  
+            return -ERESTARTSYS;  
+        }  
+      
+        if(count < sizeof(dev->val)) {  
+            goto out;  
+        }          
+      
+        /*将寄存器val的值拷贝到用户提供的缓冲区*/  
+        if(copy_to_user(buf, &(dev->val), sizeof(dev->val))) {  
+            err = -EFAULT;  
+            goto out;  
+        }  
+      
+        err = sizeof(dev->val);  
+     
+    out:  
+        up(&(dev->sem));  
+        return err;  
+    }  
+      
+    /*写设备的寄存器值val*/  
+    static ssize_t pn54x_write(struct file* filp, const char __user *buf, size_t count, loff_t* f_pos) {  
+        struct pn54x_android_dev* dev = filp->private_data;  
+        ssize_t err = 0;          
+      
+        /*同步访问*/  
+        if(down_interruptible(&(dev->sem))) {  
+            return -ERESTARTSYS;          
+        }          
+      
+        if(count != sizeof(dev->val)) {  
+            goto out;          
+        }          
+      
+        /*将用户提供的缓冲区的值写到设备寄存器去*/  
+        if(copy_from_user(&(dev->val), buf, count)) {  
+            err = -EFAULT;  
+            goto out;  
+        }  
+      
+        err = sizeof(dev->val);  
+      
+    out:  
+        up(&(dev->sem));  
+        return err;  
+    }  
+
+
+    /*读取寄存器val的值到缓冲区buf中，内部使用*/  
+    static ssize_t __pn54x_get_val(struct pn54x_android_dev* dev, char* buf) {  
+        int val = 0;          
+      
+        /*同步访问*/  
+        if(down_interruptible(&(dev->sem))) {                  
+            return -ERESTARTSYS;          
+        }          
+      
+        val = dev->val;          
+        up(&(dev->sem));          
+      
+        return snprintf(buf, PAGE_SIZE, "%d\n", val);  
+    }  
+      
+    /*把缓冲区buf的值写到设备寄存器val中去，内部使用*/  
+    static ssize_t __pn54x_set_val(struct pn54x_android_dev* dev, const char* buf, size_t count) {  
+        int val = 0;          
+      
+        /*将字符串转换成数字*/          
+        val = simple_strtol(buf, NULL, 10);          
+      
+        /*同步访问*/          
+        if(down_interruptible(&(dev->sem))) {                  
+            return -ERESTARTSYS;          
+        }          
+      
+        dev->val = val;          
+        up(&(dev->sem));  
+      
+        return count;  
+    }  
+      
+    /*读取设备属性val*/  
+    static ssize_t pn54x_val_show(struct device* dev, struct device_attribute* attr, char* buf) {  
+        struct pn54x_android_dev* hdev = (struct pn54x_android_dev*)dev_get_drvdata(dev);          
+      
+        return __pn54x_get_val(hdev, buf);  
+    }  
+      
+    /*写设备属性val*/  
+    static ssize_t pn54x_val_store(struct device* dev, struct device_attribute* attr, const char* buf, size_t count) {   
+        struct pn54x_android_dev* hdev = (struct pn54x_android_dev*)dev_get_drvdata(dev);    
+          
+        return __pn54x_set_val(hdev, buf, count);  
+    }  
+
+    /*读取设备寄存器val的值，保存在page缓冲区中*/  
+    static ssize_t pn54x_proc_read(char* page, char** start, off_t off, int count, int* eof, void* data) {  
+        if(off > 0) {  
+            *eof = 1;  
+            return 0;  
+        }  
+      
+        return __pn54x_get_val(pn54x_dev, page);  
+    }  
+      
+    /*把缓冲区的值buff保存到设备寄存器val中去*/  
+    static ssize_t pn54x_proc_write(struct file* filp, const char __user *buff, unsigned long len, void* data) {  
+        int err = 0;  
+        char* page = NULL;  
+      
+        if(len > PAGE_SIZE) {  
+            printk(KERN_ALERT"The buff is too large: %lu.\n", len);
+            return -EFAULT;  
+        }  
+      
+        page = (char*)__get_free_page(GFP_KERNEL);  
+        if(!page) {                  
+            printk(KERN_ALERT"Failed to alloc page.\n");  
+            return -ENOMEM;  
+        }          
+      
+        /*先把用户提供的缓冲区值拷贝到内核缓冲区中去*/  
+        if(copy_from_user(page, buff, len)) {  
+            printk(KERN_ALERT"Failed to copy buff from user.\n");                  
+            err = -EFAULT;  
+            goto out;  
+        }  
+      
+        err = __pn54x_set_val(pn54x_dev, page, len);  
+      
+    out:  
+        free_page((unsigned long)page);  
+        return err;  
+    }  
+      
+    /*创建/proc/pn54x文件*/  
+    static void pn54x_create_proc(void) {  
+        struct proc_dir_entry* entry;  
+          
+        entry = create_proc_entry(PN54X_DEVICE_PROC_NAME, 0, NULL);  
+        if(entry) {  
+            // entry->owner = THIS_MODULE;  
+            entry->read_proc = pn54x_proc_read;  
+            entry->write_proc = pn54x_proc_write;  
+        }  
+    }  
+      
+    /*删除/proc/pn54x文件*/  
+    static void pn54x_remove_proc(void) {  
+        remove_proc_entry(PN54X_DEVICE_PROC_NAME, NULL);  
+    }  
+
+/*初始化设备*/  
+static int  __pn54x_setup_dev(struct pn54x_android_dev* dev) {  
+    int err;  
+    dev_t devno = MKDEV(pn54x_major, pn54x_minor);  
+  
+    memset(dev, 0, sizeof(struct pn54x_android_dev));  
+  
+    cdev_init(&(dev->dev), &pn54x_fops);  
+    dev->dev.owner = THIS_MODULE;  
+    dev->dev.ops = &pn54x_fops;          
+  
+    /*注册字符设备*/  
+    err = cdev_add(&(dev->dev),devno, 1);  
+    if(err) {  
+        return err;  
+    }          
+  
+    /*初始化信号量和寄存器val的值*/  
+    sema_init(&(dev->sem), 1);  
+    dev->val = 0;  
+  
+    return 0;  
+}  
+  
+/* init driver module */  
+static int __init pn54x_init(void){   
+    int err = -1;  
+    dev_t dev = 0;  
+    struct device* temp = NULL;  
+  
+    printk(KERN_ALERT"Initializing pn54x device.\n");          
+  
+    /* alloc major/minor verison no. */  
+    err = alloc_chrdev_region(&dev, 0, 1, PN54X_DEVICE_NODE_NAME);  
+    if(err < 0) {  
+        printk(KERN_ALERT"Failed to alloc char dev region.\n");  
+        goto fail;  
+    }  
+  
+    pn54x_major = MAJOR(dev);  
+    pn54x_minor = MINOR(dev);          
+  
+    /* alloc dev data structure */  
+    pn54x_dev = kmalloc(sizeof(struct pn54x_android_dev), GFP_KERNEL);  
+    if(!pn54x_dev) {  
+        err = -ENOMEM;  
+        printk(KERN_ALERT"Failed to alloc pn54x_dev.\n");  
+        goto unregister;  
+    }          
+  
+    /* init device */  
+    err = __pn54x_setup_dev(pn54x_dev);  
+    if(err) {  
+        printk(KERN_ALERT"Failed to setup dev: %d.\n", err);  
+        goto cleanup;  
+    }          
+  
+    /*在/sys/class/目录下创建设备类别目录pn54x*/  
+    pn54x_class = class_create(THIS_MODULE, PN54X_DEVICE_CLASS_NAME);  
+    if(IS_ERR(pn54x_class)) {  
+        err = PTR_ERR(pn54x_class);  
+        printk(KERN_ALERT"Failed to create pn54x class.\n");  
+        goto destroy_cdev;  
+    }          
+  
+    /*在/dev/目录和/sys/class/pn54x目录下分别创建设备文件pn54x*/  
+    temp = device_create(pn54x_class, NULL, dev, "%s", PN54X_DEVICE_FILE_NAME);  
+    if(IS_ERR(temp)) {  
+        err = PTR_ERR(temp);  
+        printk(KERN_ALERT"Failed to create pn54x device.");  
+        goto destroy_class;  
+    }          
+  
+    /*在/sys/class/pn54x/pn54x目录下创建属性文件val*/  
+    err = device_create_file(temp, &dev_attr_val);  
+    if(err < 0) {  
+        printk(KERN_ALERT"Failed to create attribute val.");                  
+        goto destroy_device;  
+    }  
+  
+    dev_set_drvdata(temp, pn54x_dev);          
+  
+    /*创建/proc/pn54x文件*/  
+    pn54x_create_proc();  
+  
+    printk(KERN_ALERT"Succedded to initialize pn54x device.\n");  
+    return 0;  
+  
+destroy_device:  
+    device_destroy(pn54x_class, dev);  
+  
+destroy_class:  
+    class_destroy(pn54x_class);  
+  
+destroy_cdev:  
+    cdev_del(&(pn54x_dev->dev));  
+  
+cleanup:  
+    kfree(pn54x_dev);  
+  
+unregister:  
+    unregister_chrdev_region(MKDEV(pn54x_major, pn54x_minor), 1);  
+  
+fail:  
+    return err;  
+}  
+  
+/* exit driver module */  
+static void __exit pn54x_exit(void) {  
+    dev_t devno = MKDEV(pn54x_major, pn54x_minor);  
+  
+    printk(KERN_ALERT"Destroy pn54x device.\n");          
+  
+    /* remove /proc/pn54x file*/  
+    pn54x_remove_proc();          
+  
+    /* destroy device & class */  
+    if(pn54x_class) {  
+        device_destroy(pn54x_class, MKDEV(pn54x_major, pn54x_minor));  
+        class_destroy(pn54x_class);  
+    }          
+  
+    /* delete char device & release dev memory */  
+    if(pn54x_dev) {  
+        cdev_del(&(pn54x_dev->dev));  
+        kfree(pn54x_dev);  
+    }          
+  
+    /* release device no. */  
+    unregister_chrdev_region(devno, 1);  
+}  
+
+
+static long  pn54x_dev_ioctl(struct file *filp, unsigned int cmd,
+				unsigned long arg)
+{
+	// struct pn54x_dev *pn54x_dev = filp->private_data;
+        nci_data_t * pNciData = NULL;
+	int ret = 0;
+
+	pr_info("%s, cmd=%d, arg=%lu\n", __func__, cmd, arg);
+        printk(KERN_ALERT "%s, cmd=%d, arg=%lu\n", __func__, cmd, arg);      
+
+	switch (cmd) {
+	case CMD_NCI_FIFO_INIT:
+		nci_kfifo_init();
+		break;
+        case CMD_NCI_FIFO_PUSH:
+		pNciData = (nci_data_t*)kmalloc(sizeof(nci_data_t), GFP_KERNEL);
+                if (pNciData)
+		{
+			ret = copy_from_user(pNciData, (nci_data_t *)arg, sizeof(nci_data_t));
+			if (ret) break;
+			nci_kfifo_push(pNciData);
+		}
+		break;
+	case CMD_NCI_FIFO_RELEASE:
+		nci_kfifo_release();
+		break;
+
+	default:
+		pr_err("%s bad ioctl %u\n", __func__, cmd);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+MODULE_LICENSE("GPL");  
+MODULE_DESCRIPTION("First Android Driver");  
+  
+module_init(pn54x_init);  
+module_exit(pn54x_exit); 
diff --git a/drivers/pn54x/pn54x.h b/drivers/pn54x/pn54x.h
new file mode 100755
index 0000000..1b49bb4
--- /dev/null
+++ b/drivers/pn54x/pn54x.h
@@ -0,0 +1,18 @@
+    #ifndef _HELLO_ANDROID_H_  
+    #define _HELLO_ANDROID_H_  
+      
+    #include <linux/cdev.h>  
+    #include <linux/semaphore.h>  
+      
+    #define PN54X_DEVICE_NODE_NAME  "pn54x"  
+    #define PN54X_DEVICE_FILE_NAME  "pn54x"  
+    #define PN54X_DEVICE_PROC_NAME  "pn54x"  
+    #define PN54X_DEVICE_CLASS_NAME "pn54x"  
+      
+    struct pn54x_android_dev {  
+        int val;
+        struct semaphore sem;  
+        struct cdev dev;  
+    };  
+      
+    #endif  
diff --git a/include/linux/pn5xx_i2c.h b/include/linux/pn5xx_i2c.h
new file mode 100644
index 0000000..9688acb
--- /dev/null
+++ b/include/linux/pn5xx_i2c.h
@@ -0,0 +1,49 @@
+/*
+ * Copyright (C) 2010 Trusted Logic S.A.
+ * modifications copyright (C) 2015 NXP B.V.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#define PN544_MAGIC	0xE9
+
+/*
+ * PN544 power control via ioctl
+ * PN544_SET_PWR(0): power off
+ * PN544_SET_PWR(1): power on
+ * PN544_SET_PWR(2): reset and power on with firmware download enabled
+ */
+
+#define PWR_OFF 0
+#define PWR_ON  1
+#define PWR_FW  2
+
+#define CLK_OFF 0
+#define CLK_ON  1
+
+#define PN544_SET_PWR	_IOW(PN544_MAGIC, 0x01, unsigned int)
+#define PN54X_CLK_REQ	_IOW(PN544_MAGIC, 0x02, unsigned int)
+
+struct pn544_i2c_platform_data {
+	unsigned int irq_gpio;
+	unsigned int ven_gpio;
+	unsigned int firm_gpio;
+	unsigned int clkreq_gpio;
+	struct regulator *pvdd_reg;
+	struct regulator *vbat_reg;
+	struct regulator *pmuvcc_reg;
+	struct regulator *sevdd_reg;
+};
+
